package alma.acs.tmcdb.translator;

import java.util.HashMap;
import java.util.Map;

public class Column2Attribute_HwConfigMonitoring extends AbstractColumn2Attribute {

	public Column2Attribute_HwConfigMonitoring() {

		Map<String,String> tmpMap;
		map = new HashMap<String, Map<String,String>>();
				tmpMap = new HashMap<String,String>();
				tmpMap.put("configurationid", "configurationId");
				tmpMap.put("globalconfigid", "globalConfigId");
				tmpMap.put("swconfigurationid", "swConfigurationId");
				tmpMap.put("telescopename", "telescopeName");
				tmpMap.put("arrayreferencex", "arrayReferenceX");
				tmpMap.put("arrayreferencey", "arrayReferenceY");
				tmpMap.put("arrayreferencez", "arrayReferenceZ");
				tmpMap.put("xpdelaybllocked", "XPDelayBLLocked");
				tmpMap.put("xpdelayblincreaseversion", "XPDelayBLIncreaseVersion");
				tmpMap.put("xpdelayblcurrentversion", "XPDelayBLCurrentVersion");
				tmpMap.put("xpdelayblwho", "XPDelayBLWho");
				tmpMap.put("xpdelayblchangedesc", "XPDelayBLChangeDesc");
			map.put("hwconfiguration", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("configurationid", "configurationId");
				tmpMap.put("updatetime", "updateTime");
				tmpMap.put("autoarraycount", "autoArrayCount");
				tmpMap.put("manarraycount", "manArrayCount");
				tmpMap.put("datacapturecount", "dataCaptureCount");
			map.put("systemcounters", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("lruname", "LRUName");
				tmpMap.put("fullname", "fullName");
				tmpMap.put("icd", "ICD");
				tmpMap.put("icddate", "ICDDate");
				tmpMap.put("description", "description");
				tmpMap.put("notes", "notes");
			map.put("lrutype", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("assemblytypename", "assemblyTypeName");
				tmpMap.put("baseelementtype", "baseElementType");
				tmpMap.put("lruname", "LRUName");
				tmpMap.put("fullname", "fullName");
				tmpMap.put("description", "description");
				tmpMap.put("notes", "notes");
				tmpMap.put("componenttypeid", "componentTypeId");
				tmpMap.put("productioncode", "productionCode");
				tmpMap.put("simulatedcode", "simulatedCode");
			map.put("assemblytype", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("schemaid", "schemaId");
				tmpMap.put("urn", "URN");
				tmpMap.put("configurationid", "configurationId");
				tmpMap.put("assemblytypename", "assemblyTypeName");
				tmpMap.put("schema", "schema");
			map.put("hwschemas", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("assemblyid", "assemblyId");
				tmpMap.put("assemblytypename", "assemblyTypeName");
				tmpMap.put("configurationid", "configurationId");
				tmpMap.put("serialnumber", "serialNumber");
				tmpMap.put("data", "data");
			map.put("assembly", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("rolename", "roleName");
				tmpMap.put("assemblytypename", "assemblyTypeName");
			map.put("assemblyrole", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("basetype", "baseType");
				tmpMap.put("baseelementname", "baseElementName");
				tmpMap.put("configurationid", "configurationId");
			map.put("baseelement", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("baseband", "baseBand");
				tmpMap.put("ip", "IP");
			map.put("acacorrset", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("antennaname", "antennaName");
				tmpMap.put("antennatype", "antennaType");
				tmpMap.put("dishdiameter", "dishDiameter");
				tmpMap.put("commissiondate", "commissionDate");
				tmpMap.put("xposition", "XPosition");
				tmpMap.put("yposition", "YPosition");
				tmpMap.put("zposition", "ZPosition");
				tmpMap.put("xpositionerr", "XPositionErr");
				tmpMap.put("ypositionerr", "YPositionErr");
				tmpMap.put("zpositionerr", "ZPositionErr");
				tmpMap.put("xoffset", "XOffset");
				tmpMap.put("yoffset", "YOffset");
				tmpMap.put("zoffset", "ZOffset");
				tmpMap.put("posobservationtime", "posObservationTime");
				tmpMap.put("posexecblockuid", "posExecBlockUID");
				tmpMap.put("posscannumber", "posScanNumber");
				tmpMap.put("comments", "comments");
				tmpMap.put("delay", "delay");
				tmpMap.put("delayerror", "delayError");
				tmpMap.put("delobservationtime", "delObservationTime");
				tmpMap.put("delexecblockuid", "delExecBlockUID");
				tmpMap.put("delscannumber", "delScanNumber");
				tmpMap.put("xdelayref", "XDelayRef");
				tmpMap.put("ydelayref", "YDelayRef");
				tmpMap.put("zdelayref", "ZDelayRef");
				tmpMap.put("looffsettingindex", "LOOffsettingIndex");
				tmpMap.put("walshseq", "walshSeq");
				tmpMap.put("caibaseline", "caiBaseline");
				tmpMap.put("caiaca", "caiAca");
				tmpMap.put("locked", "locked");
				tmpMap.put("increaseversion", "increaseVersion");
				tmpMap.put("currentversion", "currentVersion");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("delaybllocked", "delayBLLocked");
				tmpMap.put("delayblincreaseversion", "delayBLIncreaseVersion");
				tmpMap.put("delayblcurrentversion", "delayBLCurrentVersion");
				tmpMap.put("delayblwho", "delayBLWho");
				tmpMap.put("delayblchangedesc", "delayBLChangeDesc");
			map.put("antenna", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("bbonedelay", "bbOneDelay");
				tmpMap.put("bbtwodelay", "bbTwoDelay");
				tmpMap.put("bbthreedelay", "bbThreeDelay");
				tmpMap.put("bbfourdelay", "bbFourDelay");
				tmpMap.put("locked", "locked");
				tmpMap.put("increaseversion", "increaseVersion");
				tmpMap.put("currentversion", "currentVersion");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
			map.put("acacorrdelays", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("padname", "padName");
				tmpMap.put("commissiondate", "commissionDate");
				tmpMap.put("xposition", "XPosition");
				tmpMap.put("yposition", "YPosition");
				tmpMap.put("zposition", "ZPosition");
				tmpMap.put("xpositionerr", "XPositionErr");
				tmpMap.put("ypositionerr", "YPositionErr");
				tmpMap.put("zpositionerr", "ZPositionErr");
				tmpMap.put("posobservationtime", "posObservationTime");
				tmpMap.put("posexecblockuid", "posExecBlockUID");
				tmpMap.put("posscannumber", "posScanNumber");
				tmpMap.put("delay", "delay");
				tmpMap.put("delayerror", "delayError");
				tmpMap.put("delobservationtime", "delObservationTime");
				tmpMap.put("delexecblockuid", "delExecBlockUID");
				tmpMap.put("delscannumber", "delScanNumber");
				tmpMap.put("locked", "locked");
				tmpMap.put("increaseversion", "increaseVersion");
				tmpMap.put("currentversion", "currentVersion");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
			map.put("pad", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("commissiondate", "commissionDate");
			map.put("frontend", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("commissiondate", "commissionDate");
			map.put("photonicreference", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("commissiondate", "commissionDate");
			map.put("weatherstationcontroller", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("commissiondate", "commissionDate");
			map.put("centrallo", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("commissiondate", "commissionDate");
			map.put("aostiming", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("commissiondate", "commissionDate");
				tmpMap.put("xposition", "XPosition");
				tmpMap.put("yposition", "YPosition");
				tmpMap.put("zposition", "ZPosition");
			map.put("holographytower", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("antennatopadid", "antennaToPadId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("padid", "padId");
				tmpMap.put("starttime", "startTime");
				tmpMap.put("endtime", "endTime");
				tmpMap.put("planned", "planned");
				tmpMap.put("mountmetrologyan0coeff", "mountMetrologyAN0Coeff");
				tmpMap.put("mountmetrologyaw0coeff", "mountMetrologyAW0Coeff");
				tmpMap.put("locked", "locked");
				tmpMap.put("increaseversion", "increaseVersion");
				tmpMap.put("currentversion", "currentVersion");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
			map.put("antennatopad", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("weatherstationid", "weatherStationId");
				tmpMap.put("padid", "padId");
				tmpMap.put("starttime", "startTime");
				tmpMap.put("endtime", "endTime");
				tmpMap.put("planned", "planned");
			map.put("weatherstationtopad", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("towertopadid", "towerToPadId");
				tmpMap.put("holographytowerid", "holographyTowerId");
				tmpMap.put("padid", "padId");
				tmpMap.put("azimuth", "azimuth");
				tmpMap.put("elevation", "elevation");
			map.put("holographytowertopad", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("fedelayid", "FEDelayId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("receiverband", "receiverBand");
				tmpMap.put("polarization", "polarization");
				tmpMap.put("sideband", "sideBand");
				tmpMap.put("delay", "delay");
				tmpMap.put("delayerror", "delayError");
				tmpMap.put("observationtime", "observationTime");
				tmpMap.put("execblockuid", "execBlockUID");
				tmpMap.put("scannumber", "scanNumber");
			map.put("fedelay", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("ifdelayid", "IFDelayId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("baseband", "baseBand");
				tmpMap.put("polarization", "polarization");
				tmpMap.put("ifswitch", "IFSwitch");
				tmpMap.put("delay", "delay");
				tmpMap.put("delayerror", "delayError");
				tmpMap.put("observationtime", "observationTime");
				tmpMap.put("execblockuid", "execBlockUID");
				tmpMap.put("scannumber", "scanNumber");
			map.put("ifdelay", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("lodelayid", "LODelayId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("baseband", "baseBand");
				tmpMap.put("delay", "delay");
				tmpMap.put("delayerror", "delayError");
				tmpMap.put("observationtime", "observationTime");
				tmpMap.put("execblockuid", "execBlockUID");
				tmpMap.put("scannumber", "scanNumber");
			map.put("lodelay", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("xpdelayid", "XPDelayId");
				tmpMap.put("configurationid", "configurationId");
				tmpMap.put("receiverband", "receiverBand");
				tmpMap.put("sideband", "sideBand");
				tmpMap.put("baseband", "baseBand");
				tmpMap.put("delay", "delay");
				tmpMap.put("delayerror", "delayError");
				tmpMap.put("observationtime", "observationTime");
				tmpMap.put("execblockuid", "execBlockUID");
				tmpMap.put("scannumber", "scanNumber");
			map.put("xpdelay", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("baseband", "baseBand");
				tmpMap.put("quadrant", "quadrant");
				tmpMap.put("channelnumber", "channelNumber");
			map.put("corrquadrant", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("corrquadrantid", "corrQuadrantId");
				tmpMap.put("rackname", "rackName");
				tmpMap.put("racktype", "rackType");
			map.put("corrquadrantrack", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("corrquadrantrackid", "corrQuadrantRackId");
				tmpMap.put("stationbinname", "stationBinName");
			map.put("corrstationbin", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("corrquadrantrackid", "corrQuadrantRackId");
				tmpMap.put("correlatorbinname", "correlatorBinName");
			map.put("correlatorbin", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("startupid", "startupId");
				tmpMap.put("configurationid", "configurationId");
				tmpMap.put("startupname", "startupName");
			map.put("startup", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementstartupid", "baseElementStartupId");
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("startupid", "startupId");
				tmpMap.put("baseelementtype", "baseElementType");
				tmpMap.put("parent", "parent");
				tmpMap.put("isgeneric", "isGeneric");
				tmpMap.put("simulated", "simulated");
			map.put("baseelementstartup", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("assemblystartupid", "assemblyStartupId");
				tmpMap.put("rolename", "roleName");
				tmpMap.put("baseelementstartupid", "baseElementStartupId");
				tmpMap.put("simulated", "simulated");
			map.put("assemblystartup", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("componentid", "componentId");
				tmpMap.put("isethernet", "isEthernet");
				tmpMap.put("nodeaddress", "nodeAddress");
				tmpMap.put("channelnumber", "channelNumber");
				tmpMap.put("hostname", "hostname");
				tmpMap.put("port", "port");
				tmpMap.put("macaddress", "macAddress");
				tmpMap.put("retries", "retries");
				tmpMap.put("timeoutrxtx", "timeOutRxTx");
				tmpMap.put("lingertime", "lingerTime");
			map.put("defaultcanaddress", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("pointingmodelid", "pointingModelId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("observationtime", "observationTime");
				tmpMap.put("execblockuid", "execBlockUID");
				tmpMap.put("scannumber", "scanNumber");
				tmpMap.put("softwareversion", "softwareVersion");
				tmpMap.put("comments", "comments");
				tmpMap.put("sourcenumber", "sourceNumber");
				tmpMap.put("metrologymode", "metrologyMode");
				tmpMap.put("metrologyflag", "metrologyFlag");
				tmpMap.put("sourcedensity", "sourceDensity");
				tmpMap.put("pointingrms", "pointingRMS");
				tmpMap.put("locked", "locked");
				tmpMap.put("increaseversion", "increaseVersion");
				tmpMap.put("currentversion", "currentVersion");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
			map.put("pointingmodel", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("pointingmodelcoeffid", "pointingModelCoeffId");
				tmpMap.put("pointingmodelid", "pointingModelId");
				tmpMap.put("coeffname", "coeffName");
				tmpMap.put("coeffvalue", "coeffValue");
			map.put("pointingmodelcoeff", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("pointingmodelcoeffid", "pointingModelCoeffId");
				tmpMap.put("receiverband", "receiverBand");
				tmpMap.put("offset", "offset");
			map.put("pointingmodelcoeffoffset", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("focusmodelid", "focusModelId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("observationtime", "observationTime");
				tmpMap.put("execblockuid", "execBlockUID");
				tmpMap.put("scannumber", "scanNumber");
				tmpMap.put("softwareversion", "softwareVersion");
				tmpMap.put("comments", "comments");
				tmpMap.put("sourcedensity", "sourceDensity");
				tmpMap.put("locked", "locked");
				tmpMap.put("increaseversion", "increaseVersion");
				tmpMap.put("currentversion", "currentVersion");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
			map.put("focusmodel", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("focusmodelcoeffid", "focusModelCoeffId");
				tmpMap.put("focusmodelid", "focusModelId");
				tmpMap.put("coeffname", "coeffName");
				tmpMap.put("coeffvalue", "coeffValue");
			map.put("focusmodelcoeff", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("focusmodelcoeffid", "focusModelCoeffId");
				tmpMap.put("receiverband", "receiverBand");
				tmpMap.put("offset", "offset");
			map.put("focusmodelcoeffoffset", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("defaultcomponentid", "defaultComponentId");
				tmpMap.put("componenttypeid", "componentTypeId");
				tmpMap.put("assemblytypename", "assemblyTypeName");
				tmpMap.put("impllang", "implLang");
				tmpMap.put("realtime", "realTime");
				tmpMap.put("code", "code");
				tmpMap.put("path", "path");
				tmpMap.put("isautostart", "isAutostart");
				tmpMap.put("isdefault", "isDefault");
				tmpMap.put("isstandalonedefined", "isStandaloneDefined");
				tmpMap.put("keepalivetime", "keepAliveTime");
				tmpMap.put("minloglevel", "minLogLevel");
				tmpMap.put("minloglevellocal", "minLogLevelLocal");
				tmpMap.put("xmldoc", "XMLDoc");
			map.put("defaultcomponent", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("defaultbacipropid", "defaultBaciPropId");
				tmpMap.put("defaultcomponentid", "defaultComponentId");
				tmpMap.put("propertyname", "propertyName");
				tmpMap.put("description", "description");
				tmpMap.put("format", "format");
				tmpMap.put("units", "units");
				tmpMap.put("resolution", "resolution");
				tmpMap.put("archive_priority", "archive_priority");
				tmpMap.put("archive_min_int", "archive_min_int");
				tmpMap.put("archive_max_int", "archive_max_int");
				tmpMap.put("archive_mechanism", "archive_mechanism");
				tmpMap.put("archive_suppress", "archive_suppress");
				tmpMap.put("default_timer_trig", "default_timer_trig");
				tmpMap.put("min_timer_trig", "min_timer_trig");
				tmpMap.put("initialize_devio", "initialize_devio");
				tmpMap.put("min_delta_trig", "min_delta_trig");
				tmpMap.put("default_value", "default_value");
				tmpMap.put("graph_min", "graph_min");
				tmpMap.put("graph_max", "graph_max");
				tmpMap.put("min_step", "min_step");
				tmpMap.put("archive_delta", "archive_delta");
				tmpMap.put("archive_delta_percent", "archive_delta_percent");
				tmpMap.put("alarm_high_on", "alarm_high_on");
				tmpMap.put("alarm_low_on", "alarm_low_on");
				tmpMap.put("alarm_high_off", "alarm_high_off");
				tmpMap.put("alarm_low_off", "alarm_low_off");
				tmpMap.put("alarm_timer_trig", "alarm_timer_trig");
				tmpMap.put("min_value", "min_value");
				tmpMap.put("max_value", "max_value");
				tmpMap.put("bitdescription", "bitDescription");
				tmpMap.put("whenset", "whenSet");
				tmpMap.put("whencleared", "whenCleared");
				tmpMap.put("statesdescription", "statesDescription");
				tmpMap.put("condition", "condition");
				tmpMap.put("alarm_on", "alarm_on");
				tmpMap.put("alarm_off", "alarm_off");
				tmpMap.put("alarm_fault_family", "alarm_fault_family");
				tmpMap.put("alarm_fault_member", "alarm_fault_member");
				tmpMap.put("alarm_level", "alarm_level");
				tmpMap.put("data", "data");
			map.put("defaultbaciproperty", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("defaultmonitorpointid", "defaultMonitorPointId");
				tmpMap.put("defaultbacipropertyid", "defaultBACIPropertyId");
				tmpMap.put("monitorpointname", "monitorPointName");
				tmpMap.put("indice", "indice");
				tmpMap.put("datatype", "dataType");
				tmpMap.put("rca", "RCA");
				tmpMap.put("terelated", "teRelated");
				tmpMap.put("rawdatatype", "rawDataType");
				tmpMap.put("worlddatatype", "worldDataType");
				tmpMap.put("units", "units");
				tmpMap.put("scale", "scale");
				tmpMap.put("offset", "offset");
				tmpMap.put("minrange", "minRange");
				tmpMap.put("maxrange", "maxRange");
				tmpMap.put("description", "description");
			map.put("defaultmonitorpoint", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("monitorpointid", "monitorPointId");
				tmpMap.put("bacipropertyid", "BACIPropertyId");
				tmpMap.put("monitorpointname", "monitorPointName");
				tmpMap.put("assemblyid", "assemblyId");
				tmpMap.put("indice", "indice");
				tmpMap.put("datatype", "dataType");
				tmpMap.put("rca", "RCA");
				tmpMap.put("terelated", "teRelated");
				tmpMap.put("rawdatatype", "rawDataType");
				tmpMap.put("worlddatatype", "worldDataType");
				tmpMap.put("units", "units");
				tmpMap.put("scale", "scale");
				tmpMap.put("offset", "offset");
				tmpMap.put("minrange", "minRange");
				tmpMap.put("maxrange", "maxRange");
				tmpMap.put("description", "description");
			map.put("monitorpoint", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("monitorpointid", "monitorPointId");
				tmpMap.put("starttime", "startTime");
				tmpMap.put("endtime", "endTime");
				tmpMap.put("monitorts", "monitorTS");
				tmpMap.put("samplesize", "sampleSize");
				tmpMap.put("monitorclob", "monitorClob");
				tmpMap.put("minstat", "minStat");
				tmpMap.put("maxstat", "maxStat");
				tmpMap.put("meanstat", "meanStat");
				tmpMap.put("stddevstat", "stdDevStat");
			map.put("monitordata", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("baseelementonlineid", "baseElementOnlineId");
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("configurationid", "configurationId");
				tmpMap.put("starttime", "startTime");
				tmpMap.put("endtime", "endTime");
				tmpMap.put("normaltermination", "normalTermination");
			map.put("baseelementonline", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("assemblyonlineid", "assemblyOnlineId");
				tmpMap.put("assemblyid", "assemblyId");
				tmpMap.put("baseelementonlineid", "baseElementOnlineId");
				tmpMap.put("rolename", "roleName");
				tmpMap.put("starttime", "startTime");
				tmpMap.put("endtime", "endTime");
			map.put("assemblyonline", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("arrayid", "arrayId");
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("type", "type");
				tmpMap.put("userid", "userId");
				tmpMap.put("starttime", "startTime");
				tmpMap.put("endtime", "endTime");
				tmpMap.put("normaltermination", "normalTermination");
			map.put("array", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("arrayid", "arrayId");
			map.put("antennatoarray", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("arrayid", "arrayId");
				tmpMap.put("sbuid", "sbUID");
				tmpMap.put("starttime", "startTime");
				tmpMap.put("endtime", "endTime");
				tmpMap.put("normaltermination", "normalTermination");
			map.put("sbexecution", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("antennatofrontendid", "antennaToFrontEndId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("frontendid", "frontEndId");
				tmpMap.put("starttime", "startTime");
				tmpMap.put("endtime", "endTime");
			map.put("antennatofrontend", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("tablename", "tableName");
				tmpMap.put("swconfigurationid", "swConfigurationId");
				tmpMap.put("entityid", "entityId");
				tmpMap.put("locked", "locked");
				tmpMap.put("increaseversion", "increaseVersion");
				tmpMap.put("currentversion", "currentVersion");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
			map.put("bl_versioninfo", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("pointingmodelid", "pointingModelId");
				tmpMap.put("coeffname", "coeffName");
				tmpMap.put("coeffvalue", "coeffValue");
			map.put("bl_pointingmodelcoeff", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("pointingmodelid", "pointingModelId");
				tmpMap.put("coeffname", "coeffName");
				tmpMap.put("receiverband", "receiverBand");
				tmpMap.put("offset", "offset");
			map.put("bl_pointingmodelcoeffoffset", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("focusmodelid", "focusModelId");
				tmpMap.put("coeffname", "coeffName");
				tmpMap.put("coeffvalue", "coeffValue");
			map.put("bl_focusmodelcoeff", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("focusmodelid", "focusModelId");
				tmpMap.put("coeffname", "coeffName");
				tmpMap.put("receiverband", "receiverBand");
				tmpMap.put("offset", "offset");
			map.put("bl_focusmodelcoeffoffset", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("fedelayid", "FEDelayId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("receiverband", "receiverBand");
				tmpMap.put("polarization", "polarization");
				tmpMap.put("sideband", "sideBand");
				tmpMap.put("delay", "delay");
			map.put("bl_fedelay", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("ifdelayid", "IFDelayId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("baseband", "baseBand");
				tmpMap.put("polarization", "polarization");
				tmpMap.put("ifswitch", "IFSwitch");
				tmpMap.put("delay", "delay");
			map.put("bl_ifdelay", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("lodelayid", "LODelayId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("baseband", "baseBand");
				tmpMap.put("delay", "delay");
			map.put("bl_lodelay", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("xpdelayid", "XPDelayId");
				tmpMap.put("configurationid", "configurationId");
				tmpMap.put("receiverband", "receiverBand");
				tmpMap.put("sideband", "sideBand");
				tmpMap.put("baseband", "baseBand");
				tmpMap.put("delay", "delay");
			map.put("bl_xpdelay", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("delay", "delay");
			map.put("bl_antennadelay", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("antennatype", "antennaType");
				tmpMap.put("dishdiameter", "dishDiameter");
				tmpMap.put("commissiondate", "commissionDate");
				tmpMap.put("xposition", "XPosition");
				tmpMap.put("yposition", "YPosition");
				tmpMap.put("zposition", "ZPosition");
				tmpMap.put("xoffset", "XOffset");
				tmpMap.put("yoffset", "YOffset");
				tmpMap.put("zoffset", "ZOffset");
				tmpMap.put("looffsettingindex", "LOOffsettingIndex");
				tmpMap.put("walshseq", "walshSeq");
				tmpMap.put("caibaseline", "caiBaseline");
				tmpMap.put("caiaca", "caiAca");
			map.put("bl_antenna", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("baseelementid", "baseElementId");
				tmpMap.put("commissiondate", "commissionDate");
				tmpMap.put("xposition", "XPosition");
				tmpMap.put("yposition", "YPosition");
				tmpMap.put("zposition", "ZPosition");
				tmpMap.put("delay", "delay");
			map.put("bl_pad", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("antennatopadid", "antennaToPadId");
				tmpMap.put("mountmetrologyan0coeff", "mountMetrologyAN0Coeff");
				tmpMap.put("mountmetrologyaw0coeff", "mountMetrologyAW0Coeff");
			map.put("bl_antennatopad", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("version", "version");
				tmpMap.put("modtime", "modTime");
				tmpMap.put("operation", "operation");
				tmpMap.put("who", "who");
				tmpMap.put("changedesc", "changeDesc");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("bbonedelay", "bbOneDelay");
				tmpMap.put("bbtwodelay", "bbTwoDelay");
				tmpMap.put("bbthreedelay", "bbThreeDelay");
				tmpMap.put("bbfourdelay", "bbFourDelay");
			map.put("bl_acacorrdelays", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("antennaefficiencyid", "antennaEfficiencyId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("observationtime", "observationTime");
				tmpMap.put("execblockuid", "execBlockUID");
				tmpMap.put("scannumber", "scanNumber");
				tmpMap.put("thetaminorpolx", "thetaMinorPolX");
				tmpMap.put("thetaminorpoly", "thetaMinorPolY");
				tmpMap.put("thetamajorpolx", "thetaMajorPolX");
				tmpMap.put("thetamajorpoly", "thetaMajorPolY");
				tmpMap.put("positionanglebeampolx", "positionAngleBeamPolX");
				tmpMap.put("positionanglebeampoly", "positionAngleBeamPolY");
				tmpMap.put("sourcename", "sourceName");
				tmpMap.put("sourcesize", "sourceSize");
				tmpMap.put("frequency", "frequency");
				tmpMap.put("apertureeff", "apertureEff");
				tmpMap.put("apertureefferror", "apertureEffError");
				tmpMap.put("forwardeff", "forwardEff");
				tmpMap.put("forwardefferror", "forwardEffError");
			map.put("antennaefficiency", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("receiverqualityid", "receiverQualityId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("observationtime", "observationTime");
				tmpMap.put("execblockuid", "execBlockUID");
				tmpMap.put("scannumber", "scanNumber");
			map.put("receiverquality", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("receiverqualityparamid", "receiverQualityParamId");
				tmpMap.put("receiverqualityid", "receiverQualityId");
				tmpMap.put("frequency", "frequency");
				tmpMap.put("sidebandratio", "sidebandRatio");
				tmpMap.put("trx", "trx");
				tmpMap.put("polarization", "polarization");
				tmpMap.put("bandpassquality", "bandPassQuality");
			map.put("receiverqualityparameters", tmpMap);
				tmpMap = new HashMap<String,String>();
				tmpMap.put("holographyid", "holographyId");
				tmpMap.put("antennaid", "antennaId");
				tmpMap.put("observationtime", "observationTime");
				tmpMap.put("execblockuid", "execBlockUID");
				tmpMap.put("scannumber", "scanNumber");
				tmpMap.put("observationduration", "observationDuration");
				tmpMap.put("lowelevation", "lowElevation");
				tmpMap.put("highelevation", "highElevation");
				tmpMap.put("mapsize", "mapSize");
				tmpMap.put("softwareversion", "softwareVersion");
				tmpMap.put("obsmode", "obsMode");
				tmpMap.put("comments", "comments");
				tmpMap.put("frequency", "frequency");
				tmpMap.put("referenceantenna", "referenceAntenna");
				tmpMap.put("astigmatismx2y2", "astigmatismX2Y2");
				tmpMap.put("astigmatismxy", "astigmatismXY");
				tmpMap.put("astigmatismerr", "astigmatismErr");
				tmpMap.put("phaserms", "phaseRMS");
				tmpMap.put("surfacerms", "surfaceRMS");
				tmpMap.put("surfacermsnoastig", "surfaceRMSNoAstig");
				tmpMap.put("ring1rms", "ring1RMS");
				tmpMap.put("ring2rms", "ring2RMS");
				tmpMap.put("ring3rms", "ring3RMS");
				tmpMap.put("ring4rms", "ring4RMS");
				tmpMap.put("ring5rms", "ring5RMS");
				tmpMap.put("ring6rms", "ring6RMS");
				tmpMap.put("ring7rms", "ring7RMS");
				tmpMap.put("ring8rms", "ring8RMS");
				tmpMap.put("beammapfituid", "beamMapFitUID");
				tmpMap.put("surfacemapfituid", "surfaceMapFitUID");
				tmpMap.put("xfocus", "XFocus");
				tmpMap.put("xfocuserr", "XFocusErr");
				tmpMap.put("yfocus", "YFocus");
				tmpMap.put("yfocuserr", "YFocusErr");
				tmpMap.put("zfocus", "ZFocus");
				tmpMap.put("zfocuserr", "ZFocusErr");
			map.put("holography", tmpMap);

	}

}
